go.property("tile_size", 64)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.6, 0.6, 0.6, 1.0) })

	-- seed the random number generator
	math.randomseed(socket.gettime()) math.random()

	-- get bounds of tilemap
	local tx,ty,tw,th = tilemap.get_bounds("#map", "tiles")

	-- iterate over all tiles of the tilemap and build a Lua table representation
	-- of the tilemap
	self.tiles = {}
	for x=tx,tx+tw-1 do
		self.tiles[x] = {}
		for y=ty,ty+th-1 do
			-- randomise some of the tiles
			if math.random(1,10) > 8 then
				tilemap.set_tile("#map", "tiles", x, y, math.random(7, 11))
			end
			self.tiles[x][y] = tilemap.get_tile("#map", "tiles", x, y)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		-- this is the position of the bottom-left corner of the tile at 0x0
		local pos = go.get_position()

		-- add mouse position
		-- NOTE: if screen has been translated by a camera this needs to be
		-- taken into account. The action coordinates must be converted from
		-- screen to world.
		-- NOTE: if the screen uses anything other than the default stretch
		-- projection this needs to be take into account.
		pos.x = pos.x + action.x
		pos.y = pos.y + action.y

		-- get tile x,y based on click position
		local tx = 1 + math.floor(pos.x / self.tile_size)
		local ty = 1 + math.floor(pos.y / self.tile_size)

		-- set a random tile where clicked
		local tile = math.random(7, 11)
		tilemap.set_tile("#map", "tiles", tx, ty, tile)
		-- update table representation of the tilemap as well
		self.tiles[tx][ty] = tilemap.get_tile("#map", "tiles", tx, ty)
	end
end
